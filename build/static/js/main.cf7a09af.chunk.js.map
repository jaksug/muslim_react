{"version":3,"sources":["pages/doa.js","pages/detail_doa.js","serviceWorker.js","index.js","App.js"],"names":["axios","require","Title","Typography","Content","Layout","Doa","state","loading","doas","fetch","e","self","setState","get","then","response","data","catch","error","console","log","this","style","marginTop","background","marginBottom","height","padding","level","color","xs","sm","md","lg","xl","dataSource","renderItem","item","Item","className","href","id","Meta","title","nama","type","React","Component","DetailDoa","doa","parameters","queryString","parse","props","location","search","span","offset","withRouter","Boolean","window","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf7a09af.chunk.js","sourcesContent":["import { Col, Layout, Row, Typography ,List, Icon} from 'antd';\nimport React from 'react';\n\nimport './index.scss';\nconst axios = require('axios');\nconst { Title } = Typography;\nconst { Content } = Layout;\n\nclass Doa extends React.Component {\n    state = {\n        loading : false,\n        doas : []\n    };\n\n    componentDidMount() {\n        this.fetch()\n    }\n\n    fetch = (e) => {\n        var self = this;\n        self.setState({ loading: true });\n       \n\n        axios.get('http://165.22.59.78/muslim_content/public/list_doa')\n            .then(function (response) {\n                self.setState({ doas: response.data.data, loading: false });\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    render() {\n        return (\n            <Layout>\n             \n                <Content style={{ marginTop: 0 }}>\n\n\n                    <Row style={{background :'#51AA94',marginBottom:'20px',height:'50px',padding:'10px 0'}}>\n\n                        <center><Title level={4}  style={{color:'#fff'}}>Doa Harian</Title></center>\n                        </Row>\n                        <Row style={{  marginTop: '0px'}}>\n                            <Col\n                                xs={24} sm={24} md={24} lg={24} xl={24} \n                                style={{padding:'0px 10px'}}\n                            >\n                                 <List\n\n\ndataSource={this.state.doas}\nrenderItem={item => (\n    \n  <List.Item className=\"doaItem\" href={'/detail_doa?id='+item.id}>\n \n       <List.Item.Meta\n               \n               title={<a href={'/detail_doa?id='+item.id}>{item.nama}</a>}\n          \n             />\n             <div>   <Icon  color=\"#111\" type=\"right\" /></div>\n\n\n\n   \n              \n  </List.Item>\n)}\n/>\n                            </Col>\n                        </Row>\n\n\n\n                \n\n                   \n\n\n\n\n                </Content>\n            </Layout>\n\n        );\n    }\n}\n\nexport default Doa;","import { Col, Layout, Row } from 'antd';\nimport React from 'react';\nimport queryString from 'query-string'\nimport './index.scss';\nimport { withRouter } from 'react-router-dom'\nconst axios = require('axios');\nconst { Content } = Layout;\n\nclass DetailDoa extends React.Component {\n    state = {\n        loading : false,\n        doa : null,\n        id : null,\n    };\n\n    componentDidMount() {\n        let parameters = queryString.parse(this.props.location.search)\n        this.setState({\n            id : parameters.id\n        }, () => {\n            this.fetch()\n        });\n    }\n\n    fetch = (e) => {\n        var self = this;\n        self.setState({ loading: true });\n\n        axios.get('http://165.22.59.78/muslim_content/public/detail_doa/'+this.state.id)\n            .then(function (response) {\n                self.setState({ doa: response.data.data, loading: false });\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n\n\n    render() {\n    \n        if(this.state.doa != null) {\n            return (\n                <Layout>\n                 \n                    <Content style={{ marginTop: 54 ,background : '#008D94'}}>\n    \n    \n                        <Row\n    \n                            style={\n                                {\n                                    marginTop: '60px'\n                                }\n                            }\n                        >\n    \n                            <Row style={{  marginTop: '90px'}}>\n                                <Col\n                                    span={18} offset={3}\n                                >\n                                </Col>\n                            </Row>\n                        </Row>\n                    </Content>\n                </Layout>\n    \n            );\n        } else {\n            return (\n                <Layout>\n                    <Content style={{ marginTop: 54 }}>\n                        <Row style={{  marginTop: '60px'}} >\n                            <Row style={{  marginTop: '90px'}}>\n                                <Col\n                                    span={18} offset={3}\n                                >\n                               \n                                </Col>\n                            </Row>\n                        </Row>\n                    </Content>\n                </Layout>\n    \n            );\n        }\n        \n    }\n}\n\nexport default withRouter(DetailDoa);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport 'antd/dist/antd.css'; \nimport Doa from \"./pages/doa\"\nimport DetailDoa from \"./pages/detail_doa\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n\n        <Switch>\n        <Route path=\"/detail_doa\">\n            <DetailDoa/>\n          </Route>\n        <Route path=\"/doa\">\n            <Doa/>\n          </Route>\n          <Route path=\"/\">\n            <p>Anjay</p>\n          </Route>\n         \n          \n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n"],"sourceRoot":""}